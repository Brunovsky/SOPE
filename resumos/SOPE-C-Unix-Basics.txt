/***
 * SOPE C Basics
 *
 * Bruno Carvalho
 *
 */



$ Program Startup $

Rotina de início de processo:
	Busca os arguemntos da linha de comandos e das variáveis de ambiente.
		argc, *argv[], *envp[]
	Abre e disponibiliza 3 "ficheiros" ao programa.
		stdin, stdout, stderr
	Invoca a função main() do programa.
		->




$ Main Styles $

int main() {...}
int main(void) {...}
int main(int argc) {...}
int main(int argc, char* argv[]) {...}
int main(int argc, char* argv[], char* envp[]) {...}

	argc = Length the argv (número de argumentos da linha de comandos,
			incluindo o nome/path do programa).
	
	argv[0] = Nome do programa (path)
	argv[1] = Argument #1
	argv[2] = Argument #2
		...
	argv[argc] = NULL

	envp = array de apontadores para strings,
			apontando para as variáveis de ambiente.

Terminação de um processo:
  Normal:
	return; 	C Standard 		Termina o processo/thread
	exit()		ANSI C 			Termina o processo normalmente
	_exit()		POSIX 			Termina o processo normalmente, rápido

  Anormal:
    abort()


#include <stdlib.h>
void exit(int status);
- Termina imediatamente o programa retornando o código
de terminação status para o OS.
- Liberta todos os recursos atribuídos ao programa, fecha os ficheiros abertos e
transfere os dados que ainda não tenham sido guardados para o disco.

status:
- A maior parte dos sistemas operativos permite testar o exit status
do último processo executado:
	echo $? (Bash) 			echo %errorlevel$ (Windows)


#include <stdlib.h>
void _exit(int status);
- Termina imediatamente o programa retornando o código
de terminação status para o OS.
- Liberta todos os recursos atribuídos ao programa, fecha os ficheiros abertos
mas não transfere os dados que ainda não tenham sido guardados em disco.


O status é indefinido se exit() ou _exit() forem invocadas sem status,
return for invocado sem valor de return ou main() não tiver return de todo.





$ atexit() $

A função atexit() pode executar, antes de terminar, uma série de rotinas
(handlers) que tenham sido previamente registadas para execução no final do programa.

#include <stdlib.h>
int atexit(void (*func) (void));
return: 0 se OK; else erro.

Estas rotinas são executadas por ordem inversa do seu registo.





$ errno, Tratamento de erros $

Geralmente as system calls retornam um valor especial quando acontece um erro,
por exemplo -1 ou NULL.
O tipo de erro que ocorreu é colocado numa variável global errno (int).


#include <errno.h>
// int errno;

Define a variável errno, que guarda o código de erro de uma chamada de sistema.


#include <stdio.h>
void perror(const char* msg);
Mostra a string msg, seguida de ": ", seguida de uma descrição do
último erro que ocorreu numa chamada ao sistema.
Se não houver erro a reportar, mostra a string "Error 0".


#include <string.h>
char* strerror(int errnum);

Esta função retorna um apontador para uma string que contém uma descrição
do erro cujo código foi passado no argumento errnum, tipicamente errno.


errno VALUES:

		0,                //   0. Success

		// ASM GENERIC ERRNO BASE (errno-base.h)
		EPERM             //   1. Operation not permitted
		ENOENT            //   2. No such file or directory
		ESRCH             //   3. No such process
		EINTR             //   4. Interrupted system call
		EIO               //   5. Input/output error
		ENXIO             //   6. No such device or address
		E2BIG             //   7. Argument list too long
		ENOEXEC           //   8. Exec format error
		EBADF             //   9. Bad file descriptor
		ECHILD            //  10. No child processes
		EAGAIN            //  11. Try again (Resource temporarily unavailable)
		ENOMEM            //  12. Out of memory (Cannot allocate memory)
		EACCES            //  13. Permission denied
		EFAULT            //  14. Bad address
		ENOTBLK           //  15. Block device required
		EBUSY             //  16. Device or resource busy
		EEXIST            //  17. File exists
		EXDEV             //  18. Invalid cross-device link
		ENODEV            //  19. No such device
		ENOTDIR           //  20. Not a directory
		EISDIR            //  21. Is a directory
		EINVAL            //  22. Invalid argument
		ENFILE            //  23. File table overflow (Too many open files in system)
		EMFILE            //  24. Too many open files
		ENOTTY            //  25. Not a typewriter (Inappropriate ioctl for device)
		ETXTBSY           //  26. Text file busy
		EFBIG             //  27. File too large
		ENOSPC            //  28. No space left on device
		ESPIPE            //  29. Illegal seek
		EROFS             //  30. Read-only file system
		EMLINK            //  31. Too many links
		EPIPE             //  32. Broken pipe
		EDOM              //  33. Math argument out of domain (out of domain)
		ERANGE            //  34. Math result not representable (out of range)

		// ASM GENERIC ERRNO (errno.h)
		EDEADLK           //  35. Resource deadlock would occur
		ENAMETOOLONG      //  36. File name too long
		ENOLCK            //  37. No record locks available
		ENOSYS            //  38. Function not implemented
		ENOTEMPTY         //  39. Directory not empty
		ELOOP             //  40. Too many symbolic links encountered
		EWOULDBLOCK       //  = EAGA. (Operation would block)
		ENOMSG            //  42. No message of desired type
		EIDRM             //  43. Identifier removed
		ECHRNG            //  44. Channel number out of range
		EL2NSYNC          //  45. Level 2 not synchronized
		EL3HLT            //  46. Level 3 halted
		EL3RST            //  47. Level 3 reset
		ELNRNG            //  48. Link number out of range
		EUNATCH           //  49. Protocol driver not attached
		ENOCSI            //  50. No CSI structure available
		EL2HLT            //  51. Level 2 halted
		EBADE             //  52. Invalid exchange
		EBADR             //  53. Invalid request descriptor
		EXFULL            //  54. Exchange full
		ENOANO            //  55. No anode
		EBADRQC           //  56. Invalid request code
		EBADSLT           //  57. Invalid slot
		EDEADLOCK         //  = EDEADLK.
		EBFONT            //  59. Bad font file format
		ENOSTR            //  60. Device not a stream
		ENODATA           //  61. No data available
		ETIME             //  62. Timer expired
		ENOSR             //  63. Out of streams resources
		ENONET            //  64. Machine is not on the network
		ENOPKG            //  65. Package not installed
		EREMOTE           //  66. Object is remote
		ENOLINK           //  67. Link has been severed
		EADV              //  68. Advertise error
		ESRMNT            //  69. Srmount error
		ECOMM             //  70. Communication error on send
		EPROTO            //  71. Protocol error
		EMULTIHOP         //  72. Multihop attempted
		EDOTDOT           //  73. RFS specific error
		EBADMSG           //  74. Not a data message
		EOVERFLOW         //  75. Value too large for defined data type
		ENOTUNIQ          //  76. Name not unique on network
		EBADFD            //  77. File descriptor in bad state
		EREMCHG           //  78. Remote address changed
		ELIBACC           //  79. Can not access a needed shared library
		ELIBBAD           //  80. Accessing a corrupted shared library
		ELIBSCN           //  81. .lib section in a.out corrupted
		ELIBMAX           //  82. Attempting to link in too many shared libraries
		ELIBEXEC          //  83. Cannot exec a shared library directly
		EILSEQ            //  84. Illegal byte sequence
		ERESTART          //  85. Interrupted system call should be restarted
		ESTRPIPE          //  86. Streams pipe error
		EUSERS            //  87. Too many users
		ENOTSOCK          //  88. Socket operation on non-socket
		EDESTADDRREQ      //  89. Destination address required
		EMSGSIZE          //  90. Message too long
		EPROTOTYPE        //  91. Protocol wrong type for socket
		ENOPROTOOPT       //  92. Protocol not available
		EPROTONOSUPPORT   //  93. Protocol not supported
		ESOCKTNOSUPPORT   //  94. Socket type not supported
		EOPNOTSUPP        //  95. Operation not supported on transport endpoint
		EPFNOSUPPORT      //  96. Protocol family not supported
		EAFNOSUPPORT      //  97. Address family not supported by protocol
		EADDRINUSE        //  98. Address already in use
		EADDRNOTAVAIL     //  99. Cannot assign requested address
		ENETDOWN          // 100. Network is down
		ENETUNREACH       // 101. Network is unreachable
		ENETRESET         // 102. Network dropped connection because of reset
		ECONNABORTED      // 103. Software caused connection abort
		ECONNRESET        // 104. Connection reset by peer
		ENOBUFS           // 105. No buffer space available
		EISCONN           // 106. Transport endpoint is already connected
		ENOTCONN          // 107. Transport endpoint is not connected
		ESHUTDOWN         // 108. Cannot send after transport endpoint shutdown
		ETOOMANYREFS      // 109. Too many references: cannot splice
		ETIMEDOUT         // 110. Connection timed out
		ECONNREFUSED      // 111. Connection refused
		EHOSTDOWN         // 112. Host is down
		EHOSTUNREACH      // 113. No route to host
		EALREADY          // 114. Operation already in progress
		EINPROGRESS       // 115. Operation now in progress
		ESTALE            // 116. Stale NFS file handle
		EUCLEAN           // 117. Structure needs cleaning
		ENOTNAM           // 118. Not a XENIX named type file
		ENAVAIL           // 119. No XENIX semaphores available
		EISNAM            // 120. Is a named type file
		EREMOTEIO         // 121. Remote I/O error
		EDQUOT            // 122. Quota exceeded
		ENOMEDIUM         // 123. No medium found
		EMEDIUMTYPE       // 124. Wrong medium type
		ECANCELED         // 125. Operation Canceled
		ENOKEY            // 126. Required key not available
		EKEYEXPIRED       // 127. Key has expired
		EKEYREVOKED       // 128. Key has been revoked
		EKEYREJECTED      // 129. Key was rejected by service
		EOWNERDEAD        // 130. Owner died
		ENOTRECOVERABLE   // 131. State not recoverable